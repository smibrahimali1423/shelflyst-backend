const express = require('express');
const router = express.Router();
const fetchuser = require('../middleware/fetchuser');
const BookItem = require('../models/BookItem');
const { body, validationResult } = require('express-validator');

// ROUTE 1: Get all books for a particular user using GET "/api/bookdetails/getallbooks". Login required
router.get('/getallbooks', fetchuser, async (req, res) => {
    try {
        const books = await BookItem.find({ user: req.user.id });
        res.json(books);
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Internal Server Error");
    }
});

// ROUTE 2: Save a book for the authenticated user. Login required
router.post('/addbook', fetchuser, [
    body('id').notEmpty(),
    body('selfLink').notEmpty(),
    body('volumeInfo').notEmpty(),
], async (req, res) => {
    console.log("Received request to add book");

    try {
        const userId = req.user.id;
        const { id, selfLink, volumeInfo } = req.body;

        // If there are errors, return Bad request and the errors
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        const newBook = new BookItem({
            user: userId,
            id,
            selfLink,
            volumeInfo
        });

        const savedBook = await newBook.save();
        res.json(savedBook);
        console.log("Book added successfully!");
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Internal Server Error");
    }
});

// ROUTE 3: Delete an existing book using DELETE "/api/bookdetails/deletebook/:id". Login required
router.delete('/deletebook/:id', fetchuser, async (req, res) => {
    try {
        // Find the book to be deleted
        let book = await BookItem.findOne({ _id: req.params.id, user: req.user.id });
        if (!book) {
            return res.status(404).send("Book not found");
        }

        // Allow deletion only if user owns this book
        if (book.user.toString() !== req.user.id) {
            return res.status(401).send("Not Allowed");
        }

        await BookItem.findByIdAndDelete(req.params.id);
        res.json({ "Success": "Book has been deleted", book: book });
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Internal Server Error");
    }
});

// ROUTE 4: Delete all books for a particular user using DELETE "/api/bookdetails/deleteallbooks". Login required
router.delete('/deleteallbooks', fetchuser, async (req, res) => {
    try {
        // Delete all books for the authenticated user
        await BookItem.deleteMany({ user: req.user.id });
        res.json({ "Success": "All books have been deleted" });
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Internal Server Error");
    }
});

module.exports = router;
